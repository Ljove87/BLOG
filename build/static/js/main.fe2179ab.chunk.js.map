{"version":3,"sources":["components/Blog.js","components/LoginForm.js","components/BlogForm.js","components/Notification.js","components/Footer.js","services/login.js","services/blogs.js","App.js","serviceWorker.js","index.js"],"names":["Blog","blog","increment","deleteBlog","onClick","title","author","likes","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","type","value","onChange","BlogForm","handleTitleChange","handleAuthorChange","handleUrlChange","url","Notification","message","className","Footer","credentials","a","async","axios","post","response","data","baseUrl","token","get","newToken","newBlog","config","headers","Authorization","id","request","put","delete","App","useState","blogs","setBlogs","user","setUser","setUsername","setPassword","errorMessage","setErrorMessage","setTitle","setAuthor","setUrl","useEffect","console","log","blogService","then","catch","error","loggedUserJSON","window","localStorage","getItem","JSON","parse","handleLogin","e","preventDefault","loginService","setItem","stringify","setTimeout","handleCreateBlog","newBlogs","date","Date","returnedBlog","concat","event","target","handleLogout","clear","name","map","index","key","filter","find","b","voteLike","incrementLike","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe2179ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Blog = ({blog, increment, deleteBlog}) => (\r\n    <div>\r\n        <button onClick={deleteBlog}>Delete</button>   {blog.title} {blog.author} {blog.likes} <button onClick={increment}>Like</button>\r\n    </div>\r\n)\r\n\r\nexport default Blog","import React from 'react';\r\n\r\nconst LoginForm = ({\r\n    handleSubmit, \r\n    handleUsernameChange, \r\n    handlePasswordChange, \r\n    username, \r\n    password \r\n}) => {\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    username\r\n                    <input \r\n                    type=\"text\"\r\n                    value={username}\r\n                    onChange={handleUsernameChange}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                    password\r\n                    <input \r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={handlePasswordChange}\r\n                    />\r\n                </div>\r\n            <button type=\"submit\">Login</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\n\r\nconst BlogForm = ({\r\n    onSubmit, \r\n    handleTitleChange,\r\n    handleAuthorChange, \r\n    handleUrlChange,\r\n    title, \r\n    author,\r\n    url \r\n}) => {\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    title\r\n                    <input \r\n                    type=\"text\"\r\n                    value={title}\r\n                    onChange={handleTitleChange}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                    author\r\n                    <input \r\n                    type=\"text\"\r\n                    value={author}\r\n                    onChange={handleAuthorChange}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    url\r\n                    <input \r\n                    type=\"text\"\r\n                    value={url}\r\n                    onChange={handleUrlChange}\r\n                    />\r\n                </div>\r\n            <button type=\"submit\">Create</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogForm","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\r\n   return (\r\n       <div>\r\n           <h5>Tip: use username Tea, password: qagb3lslija in order to login to this app. There is no registration option nor it will be.</h5>\r\n       </div>\r\n   ) \r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\n\r\nconst baseUrl = 'http://localhost:3001/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n  }\r\n  \r\n  export default { login }","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/blogs'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = async newBlog => {\r\n\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n\r\n  const response = await axios.post(baseUrl, newBlog, config)\r\n  return response.data\r\n}\r\n\r\nconst del = async id => {\r\n  \r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n\r\n  const request = axios.delete(`${baseUrl}/${id}`, config)\r\n  const response = await request\r\n  return response.data\r\n}\r\n\r\nconst update = async (id, newBlog) => {\r\n  \r\n  const request = axios.put(`${baseUrl}/${id}`, newBlog)\r\n  const response = await request\r\n  return response.data\r\n}\r\n\r\nexport default { getAll, setToken, create, update, del }","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Blog from './components/Blog';\nimport LoginForm from './components/LoginForm'\nimport BlogForm from './components/BlogForm'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nimport loginService from './services/login';\nimport blogService from './services/blogs';\n\n\nconst App = () => {\n\n  const [blogs, setBlogs] = useState([])\n  const [user, setUser] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // states for blog creation\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [url, setUrl] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n    blogService\n    .getAll()\n    .then(response => {\n      console.log('promise fulfiled')\n      setBlogs(response.data)\n    \n    })\n    .catch(error => {\n      console.log('response', error.response)\n      console.log('error')\n    })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n}, [])\n\n  //put request\n  const incrementLike = id => {\n    const blog = blogs.find(b => b.id === id)\n    console.log('blog id', blog)\n    const voteLike = {...blog, likes: blog.likes + 1}\n\n    blogService\n    .update(id, voteLike)\n    .then(returnedBlog => {\n      setBlogs(blogs.map(blog => blog.id !== id ? blog : returnedBlog))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Blog was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      })\n  }\n\n  //login\n  const handleLogin = async (e) => {\n    e.preventDefault()\n\n    try {\n      const user = await loginService.login({username, password})\n\n      window.localStorage.setItem('loggedBlogUser', JSON.stringify(user))\n      \n      setUser(user)\n      setUsername('')\n      setPassword('')\n      console.log('success')\n    } catch (exception) {\n        setErrorMessage('wrong credentials')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        console.log('baaad')\n    }\n  }\n  \n  const deleteBlogId = (id) => {\n    console.log('deleted blog')\n    blogService\n    .del(id)\n    .then(response => {\n      setBlogs(blogs.filter(blog => blog.id !== id))\n    })\n    .catch(error => {\n      console.log(error.response);\n    })\n  }\n\n  const handleCreateBlog = async (e) => {\n    e.preventDefault()\n    const newBlogs = {\n      title: title,\n      author: author,\n      url: url,\n      date: new Date()\n    }\n\n    blogService\n    .create(newBlogs)\n    .then(returnedBlog => {\n      setBlogs(blogs.concat(returnedBlog))\n      setTitle('')\n      setAuthor('')\n      setUrl('')\n      setErrorMessage(`${author} created new blog with name ${title}`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n  }\n\n\n  const loginForm = () => {\n    \n    return (\n      <div>\n        <Notification message={errorMessage}/>\n        <div>\n          <LoginForm \n            username={username}\n            password={password}\n            handleUsernameChange={({target}) => setUsername(target.value)}\n            handlePasswordChange={({target}) => setPassword(target.value)}\n            handleSubmit={handleLogin}\n          />\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n  \n\n  const handleTitleChange = (event) => {\n    console.log(event.target.value)\n    setTitle(event.target.value)\n  }\n\n\n  const blogForm = () => {\n    return (\n      <div>\n        <BlogForm\n          title={title}\n          author={author}\n          url={url}\n          handleTitleChange={handleTitleChange}\n          handleAuthorChange={({target}) => setAuthor(target.value)}\n          handleUrlChange={({target}) => setUrl(target.value)}\n          onSubmit={handleCreateBlog}\n        />\n        \n      </div>\n    )\n  }\n\n  const handleLogout = async () => {\n    window.localStorage.clear()\n    setUser(null)\n  }\n\n\n  const logout = () => {\n    return (\n    <div><button type=\"reset\" onClick={handleLogout}>Logout</button></div>\n    )}\n\n  const blogList = () => {\n    return (\n      <div>\n        <h2>Blogs</h2>\n        <p>{user.name} logged in</p>\n        {logout()}\n        {blogs.map((blog, index) => \n        <Blog \n        key={index} \n        deleteBlog={() => deleteBlogId(blog.id)}\n        blog={blog} \n        increment={() => incrementLike(blog.id)} />\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n\n    {user === null ?\n    \n      loginForm() :\n      <div>\n        <Notification message={errorMessage}/>\n        {blogForm()}\n        {blogList()}\n      </div> \n    }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}